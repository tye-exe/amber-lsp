import * from "std/fs"
import * from "std/text"

/// Retrieves the value of an environment variable, optionally sourcing it from a file if not already set.
pub fun get_env_var(var: Text, file: Text = ".env"): Text {
    let _var = unsafe $echo "\$\{!var}"$
    if _var != "" {
        return _var
    }

    if file_exist(file) {
        unsafe $source "{file}"$
        return unsafe $echo "\$\{!var}"$
    }

    return ""
}

/// Load the env file in the environment, using `xargs`
pub fun load_env_file(file: Text = ".env"): Null {
    unsafe $export "\$(xargs < {file})" > /dev/null$
}

/// Check if a variable inside the Shell session exist
pub fun shell_isset(name: Text): Bool {
    $[[ ! -z \$\{!{nameof name}+z} ]]$ failed {
        return false
    }
    return true
}

/// Set a constant inside the Shell session
pub fun shell_constant_set(name: Text, val: Text): Null? {
    $readonly \${nameof name}="\${nameof val}" 2> /dev/null$?
}

/// Get a constant inside the Shell session
pub fun shell_constant_get(name: Text): Text? {
    return $echo \$\{!{nameof name}}$?
}

/// Set a constant inside the Shell session
pub fun shell_var_set(name: Text, val: Text): Null? {
    $export \${nameof name}="\${nameof val}" 2> /dev/null$?
}

/// Get a constant inside the Shell session
pub fun shell_var_get(name: Text): Text? {
    return $echo \$\{!{nameof name}}$?
}

/// Remove a variable inside the Shell session
pub fun shell_unset(name: Text): Null? {
    $unset {name}$?
}

/// Check if the command exist
pub fun is_command(command: Text): Bool {
    $[ -x "\$(command -v {command})" ]$ failed {
        return false
    }
    return true
}

/// Create a prompt and return the value
pub fun input(prompt: Text): Text {
    unsafe $printf "\${nameof prompt}"$
    unsafe $read$
    return "\$REPLY"
}

/// Confirm prompt (Yes/No), return true if choice is Yes
/// "No" is the default choice, set default_yes to true for "Yes" as default choice
pub fun confirm(prompt: Text, default_yes: Bool = false): Bool {
    let choice_default = default_yes then " [\x1b[1mY/\x1b[0mn]" else " [y/\x1b[1mN\x1b[0m]"
    unsafe {
        $printf "\x1b[1m{prompt}\x1b[0m{choice_default}"$
        $read -s -n 1$
        $printf "\n"$
    }
    let result = lower(unsafe $echo \$REPLY$)
    return result == "y" or (result == "" and default_yes)
}

/// Checks if the command has failed
pub fun has_failed(command: Text): Bool {
    unsafe silent $eval {command}$
    return status != 0
}

/// Close the script
pub fun exit(code: Num): Null {
    unsafe $exit "{code}"$
}

/// Check if the script is running with a user with root permission
pub fun is_root(): Bool {
    if unsafe $id -u$ == "0" {
        return true
    }

    return false
}

/// `printf` the text following the arguments
pub fun printf(format: Text, args: [Text] = [""]): Null {
    unsafe ${nameof args}=("{format}" "\$\{{nameof args}[@]}")$
    unsafe $printf "\$\{{nameof args}[@]}"$
}

/// Escape the text to be used with `printf`
pub fun printf_escape(text: Text): Text {
    return unsafe $echo \${nameof text} | sed -e 's/\\\\/\\\\\\\\/g' -e "s/%/%%/g"$
}

/// Prepare a text with formatting options for `printf`
pub fun text_shell(message: Text, style: Num, fg: Num, bg: Num): Text {
    return "\x1b[{style};{fg};{bg}m{printf_escape(message)}\x1b[0m"
}

/// Return a text as bold
pub fun text_bold(message: Text): Text {
    return "\x1b[1m{printf_escape(message)}\x1b[0m"
}

/// Return a text as italic
pub fun text_italic(message: Text): Text {
    return "\x1b[3m{printf_escape(message)}\x1b[0m"
}

/// Return a text as underlined
pub fun text_underlined(message: Text): Text {
    return "\x1b[4m{printf_escape(message)}\x1b[0m"
}

/// Print a text with a specified color
pub fun color_echo(message: Text, color: Num): Null {
    printf("\x1b[{color as Text}m%s\x1b[0m\n", [message])
}

/// Print a text as Info
pub fun echo_info(message: Text): Null {
    printf("\x1b[1;3;97;44m %s \x1b[0m\n", [message])
}

/// Print a text as Success
pub fun echo_success(message: Text): Null {
    printf("\x1b[1;3;97;42m %s \x1b[0m\n", [message])
}

/// Print a text as Warning
pub fun echo_warning(message: Text): Null {
    printf("\x1b[1;3;97;43m %s \x1b[0m\n", [message])
}

/// Print a text as Error and exit if the status code is greater than 0
pub fun error(message: Text, exit_code: Num = 1): Null {
    printf("\x1b[1;3;97;41m %s \x1b[0m\n", [message])
    if exit_code > 0 : exit(exit_code)
}
