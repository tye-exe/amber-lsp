/// Finds the first occurrence of a pettern in the content and replaces it with provided replacement text
pub fun replace_once(source, pattern, replacement) {
    return "\$\{source/{pattern}/{replacement}}"
}

/// Replaces all occurences of a pattern in the content with provided replacement text
pub fun replace(source, pattern, replacement) {
    return "\$\{source//{pattern}/{replacement}}"
}

/// Replaces all occurences of a regex pattern in the content with provided replacement text
///
/// Function uses `sed`
pub fun replace_regex(source: Text, pattern: Text, replacement: Text): Text {
    return unsafe $echo "{source}" | sed -e "s/{pattern}/{replacement}/g"$
}

/// This function splits the input `text` into an array of substrings using the specified `delimiter`. 
pub fun split(text: Text, delimiter: Text): [Text] {
    let result = [Text]
    unsafe $IFS="{delimiter}" read -rd '' -a {nameof result} < <(printf %s "\${nameof text}")$
    return result
}

/// Splits a `text` into an array of substrings based on newline characters.
pub fun lines(text: Text): [Text] {
    return split(text, "\n")
}

/// Splits a `text` into an array of substrings based on space character.
pub fun words(text: Text): [Text] {
  return split(text, " ")
}

/// Merge a text using the delimeter specified
pub fun join(list: [Text], delimiter: Text): Text {
    return unsafe $IFS="{delimiter}" ; echo "\$\{{nameof list}[*]}"$
}

/// Trim the spaces at top of the text using `sed`
pub fun trim_left(text: Text): Text {
    return unsafe $echo "{text}" | sed -e 's/^[[:space:]]*//'$
}

/// Trim the spaces at end of the text using `sed`
pub fun trim_right(text: Text): Text {
    return unsafe $echo "{text}" | sed -e 's/[[:space:]]*\$//'$
}

/// Trim the spaces from the text input
pub fun trim(text: Text): Text {
    return trim_left(trim_right(text))
}

/// Lowercase the text input using `tr`
pub fun lower(text: Text): Text {
    return unsafe $echo "{text}" | tr '[:upper:]' '[:lower:]'$
}

/// Lowercase the text input using `tr`
pub fun upper(text: Text): Text {
    return unsafe $echo "{text}" | tr '[:lower:]' '[:upper:]'$
}

/// Attempts to parse a given text into a number, returning the parsed number or zero if parsing fails.
#[allow_absurd_cast]
pub fun parse(text: Text): Num? {
    $[ -n "{text}" ] && [ "{text}" -eq "{text}" ] 2>/dev/null$?
    return text as Num
}

/// Splits a text into an array of individual characters.
pub fun chars(text: Text): [Text] {
    let chars = [Text]
    unsafe $for ((i=0; i<\$\{#{nameof text}}; i++)); do
        {nameof chars}+=( "\$\{{nameof text}:\$i:1}" );
    done;$
    return chars
}

/// Get the text or array length
#[allow_absurd_cast]
pub fun len(value): Num {
    unsafe {
        if value is Text:
            return $echo "\$\{#{nameof value}}"$ as Num
        else:
            return $echo "\$\{#{nameof value}[@]}"$ as Num
    }
}

/// Check if text contain the value
pub fun contains(text: Text, phrase: Text): Bool {
  let result = unsafe $if [[ "{text}" == *"{phrase}"* ]]; then
    echo 1
  fi$

  return result == "1"
}

/// Reverse a text using `rev`
pub fun reverse(text: Text): Text {
    return unsafe $echo "{text}" | rev$
}

/// Check if text starts with a value
pub fun starts_with(text: Text, prefix: Text): Bool {
  let result = unsafe $if [[ "{text}" == "{prefix}"* ]]; then
    echo 1
  fi$

  return result == "1"
}

/// Check if text ends with a value
pub fun ends_with(text: Text, suffix: Text): Bool {
  let result = unsafe $if [[ "{text}" == *"{suffix}" ]]; then
    echo 1
  fi$

  return result == "1"
}

/// Returns a substring from `text` starting at the given `index` (0-based).
/// If `index` is negative, the substring starts from the end of `text` based on the absolute value of `index`.
/// If `length` is provided, the substring will include `length` characters; otherwise, it slices to the end of `text`.
/// If `length` is negative, an empty string is returned.
pub fun slice(text: Text, index: Num, length: Num = 0): Text {
    if length == 0: length = len(text) - index
    if length <= 0: return ""
    return unsafe $printf "%.{length}s" "\$\{text:{index}}"$
}

/// Returns the character from `text` at the specified `index` (0-based).
/// If `index` is negative, the substring starts from the end of `text` based on the absolute value of `index`.
pub fun char_at(text: Text, index: Num): Text {
    return unsafe $printf "%.1s" "\$\{text:{index}}"$
}

/// Capitalize the first letter of the given `text`
pub fun capitalize(text: Text): Text {
    return unsafe $echo "{text}" | sed "s/^\(.\)/\U\1/"$
}

/// Pads `text` with the specified `pad` character on left until it reaches the desired `length`.
pub fun lpad(text: Text, pad: Text, length: Num): Text {
    if length <= len(text): return text
    length = len(text) - length
    pad = unsafe $printf "%{length}s" "" | tr " " "{pad}"$
    return pad + text
}

/// Pads `text` with the specified `pad` character on the right until it reaches the desired `length`.
pub fun rpad(text: Text, pad: Text, length: Num): Text {
    if length <= len(text): return text
    length = len(text) - length
    pad = unsafe $printf "%{length}s" "" | tr " " "{pad}"$
    return text + pad
}

/// Pads `text` with zeros on the left until it reaches the desired `length`.
pub fun zfill(text: Text, length: Num): Text {
    return lpad(text, "0", length)
}
